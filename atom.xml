<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yukang&#39;s Page</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cyukang.com/"/>
  <updated>2018-03-02T15:57:02.386Z</updated>
  <id>http://cyukang.com/</id>
  
  <author>
    <name>Yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker compose初始化失败问题</title>
    <link href="http://cyukang.com/2018/03/02/docker-postgres-password.html"/>
    <id>http://cyukang.com/2018/03/02/docker-postgres-password.html</id>
    <published>2018-03-02T15:17:35.000Z</published>
    <updated>2018-03-02T15:57:02.386Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>今天在Docker Postgresql用户名和密码授权的问题上花了一些时间，问题是： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">psql: FATAL:  password authentication failed for user "postgres"</div></pre></td></tr></table></figure>
<p>admin的用户名和密码是可以在docker-compose.yml里设置的，通常我们可以配置为： </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">postgresql:</span></div><div class="line"><span class="attr">  image:</span> <span class="attr">postgres:latest</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"5434:5432"</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">./data/pgsql:/var/lib/postgresql/data</span></div><div class="line"><span class="bullet">    -</span> <span class="string">./initialize/pgsql:/docker-entrypoint-initdb.d</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="attr">    POSTGRES_USER:</span> <span class="string">postgres</span></div><div class="line"><span class="attr">    POSTGRES_DB:</span> <span class="string">postgres</span></div><div class="line"><span class="attr">  secrets:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">pg_superuser_password</span></div></pre></td></tr></table></figure>
<p>某个用户的密码可以在<code>./initialize/pgsql</code>目录的脚本里设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">set -e</div><div class="line"></div><div class="line">psql -v ON_ERROR_STOP=1 --username "postgres" &lt;&lt;-EOSQL</div><div class="line">	CREATE USER user WITH PASSWORD 'the-password';</div><div class="line">	ALTER USER user CREATEDB;</div><div class="line">EOSQL</div></pre></td></tr></table></figure>
<p>只是今天碰巧想修改一下这个密码，所以就把这个脚本里的密码修改了，然后执行命令： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">docker-compose up --build -d --force-recreate</div></pre></td></tr></table></figure>
<p>而后就一直出现上面的用户授权失败。</p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>刚开始一直认为是可能dockerfile配置得不对，结果花费了些时间。后来突然想到了，PG里数据初始化应该只是第一次做了，后续如果发现<code>/var/lib/postgresql/data</code>里已经有数据了就再也不会重新设置密码，这里是配置volume的，如果还未有重要数据把<code>./data/pgsql</code>删除了即可，或者应该是可以通过attach进入容器通过pg命令修改。</p>
<h4 id="bridge-networks失败"><a href="#bridge-networks失败" class="headerlink" title="bridge networks失败"></a>bridge networks失败</h4><p>这是另外一个坑，我在一台ubuntu的服务器上build一个docker-compose，里面配置了一个桥接网络:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  app_net:</span></div><div class="line"><span class="attr">    driver:</span> <span class="string">bridge</span></div><div class="line"><span class="attr">    ipam:</span></div><div class="line"><span class="attr">      driver:</span> <span class="string">default</span></div><div class="line"><span class="attr">      config:</span></div><div class="line"><span class="bullet">      -</span></div><div class="line"><span class="attr">        subnet:</span> <span class="number">192.168</span><span class="number">.20</span><span class="number">.0</span><span class="string">/24</span></div></pre></td></tr></table></figure>
<p>在各个子容器里面配置了具体的ip地址： </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  app_net:</span></div><div class="line"><span class="attr">    ipv4_address:</span> <span class="number">192.168</span><span class="number">.20</span><span class="number">.1</span></div></pre></td></tr></table></figure>
<p>结果进入容器怎么也连不上外部网络，折腾了一圈才发现需要安装一个<a href="https://docs.docker.com/v17.09/engine/userguide/networking/default_network/custom-docker0/" target="_blank" rel="external">bridge-utils</a>。而后安装了这个包之后，继续尝试force-recreate容器，仍然不行。无奈之余把子网换一个地址<code>192.168.30.0/24</code>即可，和PG初始类似，子网的初始化也是一个一次进行的工作，而后重新build image看起来是没有影响的。docker在跑的时候居然也不会有提示。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>最近在自己工作的项目都完全Docker化，感觉是配置来折腾用起来飞。最近也在做一个重度依赖Docker的项目，所以Docker的文档需要看完，特别是网络和数据存储那块，否则会花费不少时间折腾。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;今天在Docker Postgresql用户名和密码授权的问题上花了一些时间，问题是： &lt;/p&gt;
&lt;figure class=&quot;highli
    
    </summary>
    
    
      <category term="Tools" scheme="http://cyukang.com/tags/Tools/"/>
    
      <category term="Docker" scheme="http://cyukang.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用overcommit生成git hooks</title>
    <link href="http://cyukang.com/2018/02/26/overcommit.html"/>
    <id>http://cyukang.com/2018/02/26/overcommit.html</id>
    <published>2018-02-26T11:02:14.000Z</published>
    <updated>2018-03-02T15:54:33.490Z</updated>
    
    <content type="html"><![CDATA[<p><code>git hooks</code>很方便地可以在git操作流程的各个阶段加入hooks，比如执行一些脚本来检查代码风格、跑单元测试、做代码静态检查等。git hooks的试用方法是在.git/hooks目录下写各种脚本，但是.git目录的这些脚本是不会checkin到repo里的，所以如果一个代码如果被多个开发人员共享就会显得不太方便同步hooks。</p>
<p><a href="https://stackoverflow.com/questions/427207/can-git-hook-scripts-be-managed-along-with-the-repository" target="_blank" rel="external">当然也有一些其他方法来解决这个问题</a>，比如配置links或者对于<code>git 2.9</code>以后也可以使用来定制hooks的目录:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">git config core.hooksPath hooks</div></pre></td></tr></table></figure>
<p>对于熟悉Ruby的同学可以使用<a href="https://github.com/brigade/overcommit" target="_blank" rel="external">overcommit</a>这个gem来解决。使用方法就是通过配置<code>.overcommit.yml</code>，比如:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">PreCommit:</span></div><div class="line"><span class="attr">  RuboCop:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    command:</span> <span class="string">['bundle',</span> <span class="string">'exec'</span><span class="string">,</span> <span class="string">'rubocop'</span><span class="string">]</span> <span class="comment">#  The shell command should run</span></div><div class="line"></div><div class="line"><span class="attr">  AuthorName:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>然后执行命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">overcommit install</div></pre></td></tr></table></figure>
<p>来自动生成各种hooks，通常后面的修改都是修改这个yaml文件即可，不过记得修改后需要<code>overcommit --signed</code>来重新生成hooks。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;git hooks&lt;/code&gt;很方便地可以在git操作流程的各个阶段加入hooks，比如执行一些脚本来检查代码风格、跑单元测试、做代码静态检查等。git hooks的试用方法是在.git/hooks目录下写各种脚本，但是.git目录的这些脚本是不会checki
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx https too many redirect</title>
    <link href="http://cyukang.com/2018/02/23/nginx-https-too-many-redirect.html"/>
    <id>http://cyukang.com/2018/02/23/nginx-https-too-many-redirect.html</id>
    <published>2018-02-23T09:38:44.000Z</published>
    <updated>2018-02-23T09:52:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Http请求在经过多层Nginx的时候，通常强制http跳转到https的时候会这样配置: </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">return</span> <span class="number">302</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>; </div><div class="line"><span class="comment">## 需要注意这里是request_uri而不是uri，否则会引起安全问题</span></div></pre></td></tr></table></figure>
<p>但是如果是多层Nginx，前面的Nginx需要把用户原始请求的scheme传递到后端，可以加上头部设置： </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</div></pre></td></tr></table></figure>
<p>后面的Nginx再判断一次:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">if</span> ( <span class="variable">$http_x_forwarded_proto</span> != <span class="string">'https'</span> ) &#123;</div><div class="line">  <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>否则强制https经常会出现类似<code>ERR_TOO_MANY_REDIRECTS 将您重定向的次数过多</code>这样的问题。</p>
<p>可是在实践过程中偶尔也碰到过一些ELB会丢掉scheme的问题，比如在这样的请求链路情况下<code>elb =&gt; nginx =&gt; nginx =&gt; application</code>第二层Nginx获取的scheme就有问题了，这也可能会导致<code>too many redirects</code>问题。</p>
<p>可以尝试在第二层Nginx上这样解决： </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-Proto <span class="variable">$http_x_forwarded_proto</span>;</div></pre></td></tr></table></figure>
<p>当然强制https这样的跳转逻辑尽量放在请求链路的最外层，这样问题会少一些。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Http请求在经过多层Nginx的时候，通常强制http跳转到https的时候会这样配置: &lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;sp
    
    </summary>
    
    
      <category term="Nginx" scheme="http://cyukang.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux 当前 shell 执行命令</title>
    <link href="http://cyukang.com/2018/02/22/linux-source.html"/>
    <id>http://cyukang.com/2018/02/22/linux-source.html</id>
    <published>2018-02-22T13:46:33.000Z</published>
    <updated>2018-02-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux shell 执行脚本的时候一般是会 fork 出一个子 shell，这样在有的时候就不方便了，比如要unset 当前shell 的环境变量等，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env zsh</span></div><div class="line"></div><div class="line">if [ -z $http_proxy ]; then</div><div class="line">    echo "not using proxy, set it now ... ";</div><div class="line">    export http_proxy="http://127.0.0.1:1087";</div><div class="line">    export https_proxy="https://127.0.0.1:1087";</div><div class="line">    echo $http_proxy;</div><div class="line">else</div><div class="line">    echo "using proxy now, unset it now ...";</div><div class="line">    unset http_proxy;</div><div class="line">    unset https_proxy;</div><div class="line">    echo $http_proxy;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>这时候需要执行 <code>. ./proxy_toggle.sh</code> 或者 <code>source ./proxy_toggle.sh</code>。</p>
<p><code>.</code> (a period) is a <a href="http://www.gnu.org/software/bash/manual/bashref.html#Bourne-Shell-Builtins" target="_blank" rel="external">bash shell built-in command</a> that executes the commands from a file passed as argument, in the current shell. <code>source</code> is a synonym for <code>.</code></p>
<p>From Bash man page:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line">. filename [arguments]</div><div class="line">source filename [arguments]</div><div class="line"><span class="code">       Read  and  execute  commands  from filename in the current shell</span></div><div class="line"><span class="code">       environment and return the exit status of the last command  exe‐</span></div><div class="line"><span class="code">       cuted from filename.  If filename does not contain a slash, file</span></div><div class="line"><span class="code">       names in PATH are used to find the  directory  containing  file‐</span></div><div class="line"><span class="code">       name.   The  file  searched  for in PATH need not be executable.</span></div><div class="line"><span class="code">       When bash is  not  in  posix  mode,  the  current  directory  is</span></div><div class="line"><span class="code">       searched  if no file is found in PATH.  If the sourcepath option</span></div><div class="line"><span class="code">       to the shopt builtin command is turned  off,  the  PATH  is  not</span></div><div class="line"><span class="code">       searched.   If any arguments are supplied, they become the posi‐</span></div><div class="line"><span class="code">       tional parameters when  filename  is  executed.   Otherwise  the</span></div><div class="line"><span class="code">       positional  parameters  are unchanged.  The return status is the</span></div><div class="line"><span class="code">       status of the last command exited within the  script  (0  if  no</span></div><div class="line"><span class="code">       commands  are  executed),  and false if filename is not found or</span></div><div class="line"><span class="code">       cannot be read.</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux shell 执行脚本的时候一般是会 fork 出一个子 shell，这样在有的时候就不方便了，比如要unset 当前shell 的环境变量等，&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ruby的 open 函数导致命令执行</title>
    <link href="http://cyukang.com/2018/02/12/ruby-open-vul.html"/>
    <id>http://cyukang.com/2018/02/12/ruby-open-vul.html</id>
    <published>2018-02-12T12:39:46.000Z</published>
    <updated>2018-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>首先看看 open 函数的文档说明， <a href="https://apidock.com/ruby/v1_9_3_392/Kernel/open/class：" target="_blank" rel="external">https://apidock.com/ruby/v1_9_3_392/Kernel/open/class：</a> </p>
<blockquote>
<p>If <em>path</em> starts with a pipe character, a subprocess is created, connected to the <a href="https://apidock.com/ruby/Kernel/caller" target="_blank" rel="external">caller</a> by a pair of pipes. The returned <a href="https://apidock.com/ruby/IO" target="_blank" rel="external">IO</a> object may be used to write to the standard input and read from the standard output of this subprocess. If the command following the “|” is a single minus sign, Ruby forks, and this subprocess is connected to the parent. In the subprocess, the <a href="https://apidock.com/ruby/Kernel/open" target="_blank" rel="external">open</a> call returns nil. If the command is not “-”, the subprocess runs the command. If a block is associated with an <a href="https://apidock.com/ruby/Kernel/open" target="_blank" rel="external">open</a>(“|-”) call, that block will be run twice—once in the parent and once in the child. The block parameter will be an <a href="https://apidock.com/ruby/IO" target="_blank" rel="external">IO</a> object in the parent and nil in the child. The parent’s <a href="https://apidock.com/ruby/IO" target="_blank" rel="external">IO</a> object will be connected to the child’s stdin  and stdout. The subprocess will be terminated at the end of the block.</p>
</blockquote>
<p>其中说明了如果以|开头则会 fork 出一个进程，<code>|</code> 后面的内容则会当成一条命令执行，比如： </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">cmd = open(<span class="string">"|date"</span>)</div><div class="line">print cmd.gets</div><div class="line">cmd.close</div><div class="line">=&gt; <span class="number">2018</span>年 <span class="number">2</span>月<span class="number">12</span>日 星期一 <span class="number">21</span>时<span class="number">37</span>分<span class="number">45</span>秒 CST</div></pre></td></tr></table></figure>
<h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><p>正因为这样，这个 open 函数真的是很容易出错，最近的这个 PR： </p>
<p><a href="https://github.com/ruby/ruby/pull/1777" target="_blank" rel="external">https://github.com/ruby/ruby/pull/1777</a></p>
<p>之前我们的项目里也出现过类似的情况，直接相当于一个 webshell，任意执行命令。这样的 command injection 当然也很好检测，brakeman 之类的就可以。所以 Rails项目还是时不时地扫描一下比较好。</p>
<p>Ruby 里面有几个 Open，<a href="https://stackoverflow.com/questions/1727217/file-open-open-and-io-foreach-in-ruby-what-is-the-difference" target="_blank" rel="external">这里</a>有比较明晰的解释，Kernel.open 这个函数就是一个 wrapper，根据不同的情况做对应的处理。趟多了坑之后，才会觉得这样的特性其实是增加了程序员的负担，比如这个<code>|</code>特性可能有的人就没注意到，即使是看过文档也可能看到了<a href="https://apidock.com/ruby/v1_8_6_287/Kernel/open" target="_blank" rel="external">老版本的文档</a>，从而不知道这个边边角角。</p>
<p>当然同样的 system这样的命令执行函数也是类似的情况，比如<a href="https://github.com/OWASP/railsgoat/wiki/A1-Command-Injection" target="_blank" rel="external">railsgoat 里的这个 command injection</a>。原则是对于任何用户输入的参数，都需要做不安全的假设，做好检查。</p>
<p><a href="https://github.com/OWASP/railsgoat" target="_blank" rel="external">https://github.com/OWASP/railsgoat</a>这个项目里有各种 Rails漏洞，值得看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;首先看看 open 函数的文档说明， &lt;a href=&quot;https://apidock.com/ruby/v1_9_3_392/Kernel
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BuckleScript and Reason</title>
    <link href="http://cyukang.com/2017/09/17/bucklescript-and-reason.html"/>
    <id>http://cyukang.com/2017/09/17/bucklescript-and-reason.html</id>
    <published>2017-09-17T14:47:27.000Z</published>
    <updated>2017-09-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="BuckleScript"><a href="#BuckleScript" class="headerlink" title="BuckleScript"></a>BuckleScript</h4><p>虽然我不是前端工程师，不过因为喜欢 OCaml，所以偶尔关注 <a href="https://github.com/BuckleScript/bucklescript" target="_blank" rel="external">BuckleScript</a> 有一段时间了，今天又花时间看了看文档和代码。BuckleScript 是张宏波主导开发的开源项目，『有希望成为第一个完全由国人设计主导实现并被世界各地广泛使用的编译器』，不过是否能广泛被使用还得看后续推广。</p>
<p>简单来说BuckleScript 是一个代码转换器，把你写的 OCaml 代码生成为纯 JS 代码。这样做的好处和必要性在于：</p>
<ol>
<li>JS 太牛了，<a href="https://www.youtube.com/watch?v=jFU-wc28lF4" target="_blank" rel="external">这个跨平台语言正在吞噬着所有软件领域</a></li>
<li>JS太难维护了，大规模的 JS 代码更是噩梦。不管是从开发者角度和是从代码安全的角度，JS 需要类型！<a href="https://www.typescriptlang.org/" target="_blank" rel="external">微软的 Typescript</a> 和 <a href="https://flow.org/en/" target="_blank" rel="external">FB 的 Flow</a> ，甚至是<a href="http://elm-lang.org/examples" target="_blank" rel="external">Elm</a>都是为了给 JS 带来类型。</li>
<li>OCaml类型系统稳定可靠，关键是编译器速度快，并且可以编译在多个平台上。</li>
</ol>
<p>就我个人而言非常喜欢 OCaml，之前也有一些自己的小项目用过 OCaml。BuckleScript从技术角度来说是非常好的，我看了一些生成的代码可读性比很多代码生成器要好。并且除了直接翻译代码，这个编译器也做了很多代码优化的工作，生成 size 更小，performance 更好的 JS 代码。遗憾的是目前还不支持 Core 这个库，我之前用 Core 比较多，ಥ_ಥ。</p>
<p>关于代码生成，想起我们原来做过的 <a href="https://github.com/sipin/gorazor" target="_blank" rel="external">Gorazor</a>，从技术角度来说还是有些挑战的，不过从使用角度我个人持保留态度。代码生成毕竟会引入新的语法，我发现很多前端程序员其实并不怎么熟悉函数式编程那套，OCaml 的语法是否能在前端程序员中推广开来是个问题。BuckleScript的文档有待改进，可以给更多大一点的完整的例子。</p>
<p>关于BuckleScript和js_of_ocaml 的区别，从文档上来看js_of_ocaml 可以把 bytecode 转换为 JS 代码，而BuckleScript是在从编译器里面的rawlambda生成代码，所以理论上来说 js_of_ocaml 对 OCaml 的兼容性更好，而BuckleScript 能生成更可读的 JS 代码，目标在于兼容npm平台。</p>
<h4 id="ReasonML"><a href="#ReasonML" class="headerlink" title="ReasonML"></a>ReasonML</h4><p><a href="https://reasonml.github.io/" target="_blank" rel="external">ReasonML</a>的来由是之前我说的 OCaml 独特的语法，在很多人看来并不是很友好，所以FB 的这群人做了一个更符合大众品位的方言。然后可以通过 BuckleScript 再翻译为 JS 代码。好绕啊！不过据说 FB 已经在生成环境使用这些了。ReasonML 的开发者移植了一个之前用js_of_ocaml 写的<a href="https://github.com/reasonml-community/Mareo" target="_blank" rel="external">mario 的例子</a>，看了一遍觉得reason 的语法其实改动并不大，可能对 JS 的程序员来说更友好吧。reason 和 OCaml 的关系类似于 Elixir 和 Erlang 之前的关系，为了讨好一类程序员，又为了利用一个已经非常成熟可靠的现有平台。</p>
<p>在 HN 上有一个比较老的<a href="https://news.ycombinator.com/item?id=12400397" target="_blank" rel="external">讨论帖</a>，有时间也可以再看看。</p>
<p><a href="https://github.com/BuckleScript/bucklescript/wiki/Why-bucklescript-matters-for-Javascript-platform" target="_blank" rel="external">Why bucklescript matters for Javascript platform</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;BuckleScript&quot;&gt;&lt;a href=&quot;#BuckleScript&quot; class=&quot;headerlink&quot; title=&quot;BuckleScript&quot;&gt;&lt;/a&gt;BuckleScript&lt;/h4&gt;&lt;p&gt;虽然我不是前端工程师，不过因为喜欢 OCaml，所以偶尔关注
    
    </summary>
    
    
      <category term="OCaml" scheme="http://cyukang.com/tags/OCaml/"/>
    
      <category term="Javascript" scheme="http://cyukang.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>《深度工作-如何有效使用每一点脑力》读后</title>
    <link href="http://cyukang.com/2017/09/14/deep-work.html"/>
    <id>http://cyukang.com/2017/09/14/deep-work.html</id>
    <published>2017-09-14T14:20:14.000Z</published>
    <updated>2017-09-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/27056409/" target="_blank" rel="external">深度工作</a>这本书主要讲解了一些时间和精力管理方面的东西，人到了一定年龄就会觉得时间不够用，日子过得太快，每天觉得都没干什么就过去了。工作几年后这种感觉时不时袭来。反而是如果某段时间一直有一个阶段性的目标，就会觉得很踏实，进度和效率也可以。那种完全沉浸在思考中的状态真的也并不是累，相反所得到的结果往往是真实的收获和进步。用这本书里的术语可以称之为『深度工作』的阶段吧。</p>
<p>说起来也有道理，如果自认为我们是知识工作者，那么大多数时间处于浮潜的工作状态就得不到什么深刻的结果。作为程序员，我也有时候感觉自己并不是在做什么高深的工作，那么这样长久下去会怎么样呢，随之而来的是不可避免的压力。</p>
<p>这里讲的四个准则，任何一个都值得好好修炼，对于大多数人而言，大脑都已经被互联网和手机训练得愚钝和不可专注了：</p>
<blockquote>
<p>工作要深入<br>拥抱无聊<br>远离社交媒体<br>摒弃浮浅</p>
</blockquote>
<p>深入工作的价值在当今社会格外突出，因为机器的迅猛发展，特殊的技能所展现的价值越发明显。『连续听一系列中等水平的歌手唱歌并不能累加成一场无与伦比的演出— 换言之，才能并非一种商品，你不可以通过大批购买，然后累积起来达到一定水准，只有成为最优秀的才会得到额外奖励』。我们所面临的时代需要掌握一些更为复杂的工作和技能，而这些技能并不是随便看看就能轻易得到的。深入的东西只有静下心来，持续花大量时间和精力才能逐渐掌握。</p>
<p>想要进入深度工作，会有两个方面需要注意:</p>
<ol>
<li>时间分配，如何避免被频繁打断，如何尽量延长一大段可以持续的时间</li>
<li>学习和锻炼持续专注的能力</li>
</ol>
<p>关于时间分配，我之前尝试过番茄工作法，但是感觉并不好。因为仪式感太强和太频繁，在我正在进入工作状态的时候可能就到了节点。对于大多数程序员来说晚上可能是最能安静的写程序和思考的时间，不过随着更多的家庭责任，晚上的时间也短了。所以现在我打算早上尽早起来，这样还有一两个小时加以利用。</p>
<p>关于专注能力这块：</p>
<blockquote>
<p>不断地切换注意力会对大脑产生长久的负面影响</p>
</blockquote>
<p>这个结论应该大家都有体会，持续专注的能力往往决定人的能力，有的人可以一直脑袋里想着问题，即使是在走路或者吃饭的时候。之前在学校我也有过一段时间，脑袋里一直在想着要找的答案，那种体验已经好久没有了。</p>
<p>总之，这本书还不错，推荐有时间的话看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/27056409/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深度工作&lt;/a&gt;这本书主要讲解了一些时间和精力管理方面的东西，人到了一定年龄就会觉得时间不够用，日子过得太快
    
    </summary>
    
    
      <category term="Books" scheme="http://cyukang.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Kong的0.11.0版本</title>
    <link href="http://cyukang.com/2017/09/12/kong-new-release.html"/>
    <id>http://cyukang.com/2017/09/12/kong-new-release.html</id>
    <published>2017-09-12T06:43:00.000Z</published>
    <updated>2017-09-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kong发布了新的版本<a href="https://github.com/Mashape/kong/releases/tag/0.11.0" target="_blank" rel="external">0.11.0</a>，从这里开始区分了社区版本和商业版。这次改动比较大的是丢弃了serf，这样整个Kong节点之间的缓存同步方式变化了。开发者给出的理由如下： </p>
<ol>
<li>依赖serf，serf并不属于Nginx/OpenResty</li>
<li>这种依赖相互间通信来同步的机制对于deployment和容器化都有些不便</li>
<li>在运行的Kong节点触发serf需要一些租塞的I/O</li>
</ol>
<p>新的实现的思路是以数据库作为中心，增加一个cluster events的表。任何Kong node都可以向数据库发送变更消息，其他节点polling数据库改动，然后来更新缓存内容。这个改动非常大，不过最终Kong终于实现了节点无状态，之前那个数据库里的nodes可以丢弃掉了，任何时候节点重启只要连上数据库即可工作。我们需要担心的是这么多节点去polling数据库(当然这些动作都是在后台)，是否是一个比较耗时的工作。</p>
<p>Kong增加了新的配置选项db_update_frequency，默认为5s，表示多长时间polling一次，这需要用户自己权衡效率和及时性了。对于我们的业务来说及时性还是很重要的，比如我们新品发布时间精确到秒，那么我们就需要尽量调低这个参数。</p>
<p>所有的改动在<a href="https://github.com/Mashape/kong/pull/2561/files，" target="_blank" rel="external">https://github.com/Mashape/kong/pull/2561/files，</a></p>
<p>我大概看了一下代码，一些值得注意的地方如下：</p>
<ol>
<li>cluster相关的API和cmd都被移掉了，启动部分和serf信号处理部分都删掉了不少代码。</li>
<li>polling需要避免一个问题，比如上一次polling还未执行完成，下一次polling就不应该启动，所以这里需要锁来处理。<a href="https://github.com/Mashape/kong/pull/2561/files#diff-44982f7ff5cb89eaf66ed31217aa0d12" target="_blank" rel="external">kong/cluster_events.lua</a>实现了polling的主要过程。</li>
<li><a href="https://github.com/Mashape/kong/pull/2561/files#diff-904358fb4394ddf0541b4b3ede669a82" target="_blank" rel="external">kong/cluster_events/strategies/postgres.lua</a>目前polling还不支持分页，cluster_events是一个新建的表用来存储缓存更新事件，Kong节点就是来查询这些事件。</li>
<li>缓存部分换成了<a href="https://github.com/thibaultcha/lua-resty-mlcache" target="_blank" rel="external">lua-resty-mlcache</a>，原来还是和之前分析的类似 L1级别缓存为一个LURcache，在LuaVM里可见， L2级别的缓存为lua_shared_dict，同一个Nginx下的所有worker可见， L3就是缓存未命中的情况，需要调用其他hookup的函数去获取数据然后缓存在L2。只是这里个ipc并不是用的lua-resty-mlcache里的，而是使用的resty.worker.events。</li>
<li>事件处理部分分两部分，worker之间的事件和node之间的处理，分别由worker_events和cluster_event.lua来处理。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kong发布了新的版本&lt;a href=&quot;https://github.com/Mashape/kong/releases/tag/0.11.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;0.11.0&lt;/a&gt;，从这里开始区分了社区版本和商业版。这次改动比
    
    </summary>
    
    
      <category term="Lua" scheme="http://cyukang.com/tags/Lua/"/>
    
      <category term="Kong" scheme="http://cyukang.com/tags/Kong/"/>
    
  </entry>
  
  <entry>
    <title>Lua时间处理</title>
    <link href="http://cyukang.com/2017/09/12/lua-time-related.html"/>
    <id>http://cyukang.com/2017/09/12/lua-time-related.html</id>
    <published>2017-09-12T01:51:00.000Z</published>
    <updated>2017-09-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我需要用Lua处理一个与时间相关的问题，比如我们在配置文件里面配置一个日期(北京时间)，然后在Openresty里面判断当前时间是否在这个日期之前或者之后来做对应的逻辑。</p>
<p>Lua的时间处理还有点麻烦，主要是自带的相关库函数比较少。</p>
<blockquote>
<p>os.time()                &lt;== 返回当前系统的日历时间， 1505181586<br>os.date()                &lt;== 返回本地化的时间字符串，Tue Sep 12 09:59:56 2017<br>os.clock()               &lt;== 返回执行该程序CPU花去的时钟秒数，这里是1156.726</p>
</blockquote>
<p>我首先需要一个日期字符串转换为时间戳的函数，找来找去有了这么一个函数，使用正则表达式然后组成表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert_time</span><span class="params">(time_str)</span></span></div><div class="line">  <span class="comment">-- Assuming a date pattern like: yyyy-mm-dd hh:mm:ss</span></div><div class="line">  <span class="comment">-- Assuming timezone is Beijing</span></div><div class="line">  <span class="keyword">local</span> pattern = <span class="string">"(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)"</span></div><div class="line">  <span class="keyword">local</span> year, month, day, hour, minute, seconds = time_str:<span class="built_in">match</span>(pattern)</div><div class="line">  <span class="keyword">if</span> <span class="keyword">not</span> (year <span class="keyword">and</span> month <span class="keyword">and</span> day <span class="keyword">and</span> hour <span class="keyword">and</span> minute <span class="keyword">and</span> seconds) <span class="keyword">then</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="keyword">local</span> converted_timestamp =</div><div class="line">    <span class="built_in">os</span>.<span class="built_in">time</span>(&#123;tz = <span class="string">"CST"</span>, year = year, month = month,</div><div class="line">             day = day, hour = hour, <span class="built_in">min</span> = minute, sec = seconds&#125;)</div><div class="line">      </div><div class="line">    <span class="keyword">return</span> converted_timestamp </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>然后我们可以使用os.time()获取当前时间戳来对比。但是必须注意时区问题，Lua里面要获取当前时区和UTC里面的offset可以使用一个比较笨拙的办法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_timezone_offset_with_utc</span><span class="params">()</span></span></div><div class="line">  <span class="keyword">local</span> now = <span class="built_in">os</span>.<span class="built_in">time</span>()</div><div class="line">  <span class="keyword">return</span> <span class="built_in">os</span>.<span class="built_in">difftime</span>(now, <span class="built_in">os</span>.<span class="built_in">time</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">"!*t"</span>, now)))</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>使用这个函数获取时区的offset之后，对convert_time返回的结果做一下偏移即可和os.time()做对比。有个问题是上面的函数居然调用了三次系统调用，开销是比较大的。</p>
<blockquote>
<p>在 OpenResty 的世界里，不推荐使用这里的标准时间函数，因为这些函数通常会引发不止一个昂贵的系统调用，同时无法为 LuaJIT JIT 编译，对性能造成较大影响。推荐使用 ngx_lua 模块提供的带缓存的时间接口，如 <code>ngx.today</code>, <code>ngx.time</code>, <code>ngx.utctime</code>, <code>ngx.localtime</code>, <code>ngx.now</code>, <code>ngx.http_time</code>，以及 <code>ngx.cookie_time</code> 等。</p>
</blockquote>
<p><a href="https://github.com/stevedonovan/Penlight/blob/master/lua/pl/Date.lua" target="_blank" rel="external">Penlight</a>库也有很多日期相关的函数封装，不过大多也都使用了os相关函数。为了避免多次调用get_timezone_offset_with_utc我使用了Kong里面自带的cache相关函数做一下缓存：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 缓存上面的时区差，减少系统调用</span></div><div class="line"><span class="keyword">local</span> offset_with_cst, err =</div><div class="line">  cache.get_or_set(<span class="string">"timezone_offset"</span>, <span class="literal">nil</span>, get_timezone_offset_with_utc, <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我需要用Lua处理一个与时间相关的问题，比如我们在配置文件里面配置一个日期(北京时间)，然后在Openresty里面判断当前时间是否在这个日期之前或者之后来做对应的逻辑。&lt;/p&gt;
&lt;p&gt;Lua的时间处理还有点麻烦，主要是自带的相关库函数比较少。&lt;/p&gt;
&lt;blockquot
    
    </summary>
    
    
      <category term="Lua" scheme="http://cyukang.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>使用 exercism 来练手学语言</title>
    <link href="http://cyukang.com/2017/08/22/pl-practice-with-exercism.html"/>
    <id>http://cyukang.com/2017/08/22/pl-practice-with-exercism.html</id>
    <published>2017-08-22T04:12:02.000Z</published>
    <updated>2017-08-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们想学一门编程语言，但是光看看书和代码用例总是找不到感觉，这时候我们应该尝试写点不短不长的程序片段，可能是一个函数，或者是实现一个简单的算法。最近我发现这个叫做<a href="http://exercism.io/" target="_blank" rel="external">exercism.io</a>的网站不错，自己也在闲余时间在上面看看。</p>
<p>这里支持30多种编程语言，每种语言大概有80个左右的小问题，每个题目已经写好了对应的测试用例。这些题目不是专门的算法题目，但会涉及到编程语言相关的基本方面，单元测试、字符串，数字处理，代码风格等。我们可以随机的找一些来练练手，提交自己的代码后也可以看看别人的代码。然后再对自己的代码进行一些改进。其他人也可能会对我提交的代码 review 并提交改进评论。多写和多看确实就是学习编程的最好途径。</p>
<p><a href="http://exercism.io/" target="_blank" rel="external">http://exercism.io/</a>当然是开源的，大家都可以提供题目和测试。具体使用起来可以参考<a href="http://exercism.io/how-it-works/newbie" target="_blank" rel="external">文档</a>，其中有已经实现好的 cli 工具，每做一个 fetch 一下即可看到下一题。如果你对数学或者算法方面的问题更感兴趣，也可以试试<a href="https://projecteuler.net/" target="_blank" rel="external">https://projecteuler.net/</a>，这个则不限语言，只需要最终结果即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们想学一门编程语言，但是光看看书和代码用例总是找不到感觉，这时候我们应该尝试写点不短不长的程序片段，可能是一个函数，或者是实现一个简单的算法。最近我发现这个叫做&lt;a href=&quot;http://exercism.io/&quot; target=&quot;_blank&quot; rel=&quot;ex
    
    </summary>
    
    
      <category term="PL" scheme="http://cyukang.com/tags/PL/"/>
    
  </entry>
  
</feed>
